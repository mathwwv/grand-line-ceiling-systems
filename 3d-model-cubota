<!DOCTYPE html>
<html>
<head>
    <title>Grand Line Ceiling Systems - 3D Viewer</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <style>
        body { 
            margin: 0; 
            overflow: hidden;
            font-family: 'Arial', sans-serif;
            touch-action: none;
        }
        #brand {
            position: fixed;
            top: 20px;
            left: 20px;
            color: rgba(255,255,255,0.9);
            font-size: 1.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            z-index: 1000;
            pointer-events: none;
        }
        #controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            z-index: 1000;
        }
        .control-btn {
            background: rgba(30,30,30,0.8);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            backdrop-filter: blur(5px);
            transition: all 0.3s;
            font-size: 14px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .control-btn:hover {
            background: rgba(50,50,50,0.9);
            transform: translateY(-2px);
        }
        #loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            text-align: center;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <div id="brand">Grand Line Ceiling Systems</div>
    <div id="controls">
        <button class="control-btn" onclick="toggleAutoRotate()">Автооблёт: ВЫКЛ</button>
        <button class="control-btn" onclick="resetView()">Сброс вида</button>
    </div>
    <div id="loading">Загрузка модели...</div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        let scene, camera, renderer, controls, mixer;
        let autoRotate = false;
        let clock = new THREE.Clock();
        const MODEL_SCALE = 0.5;

        init();
        animate();

        function init() {
            // Scene setup
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x333333);

            // Camera setup
            camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 1000);
            camera.position.set(5, 5, 5);

            // Renderer setup
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            document.body.appendChild(renderer.domElement);

            // Lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);

            // Controls
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.minDistance = 2;
            controls.maxDistance = 15;
            controls.screenSpacePanning = true;

            // Model loading
            new THREE.GLTFLoader().load(
                'https://ваша_ссылка_на_модель.glb',
                (gltf) => {
                    const model = gltf.scene;
                    model.scale.set(MODEL_SCALE, MODEL_SCALE, MODEL_SCALE);
                    scene.add(model);
                    
                    // Center model
                    const box = new THREE.Box3().setFromObject(model);
                    const center = box.getCenter(new THREE.Vector3());
                    model.position.sub(center);
                    
                    document.getElementById('loading').style.display = 'none';
                },
                (progress) => {
                    console.log((progress.loaded / progress.total * 100) + '% loaded');
                },
                (error) => {
                    console.error('Error loading model:', error);
                    document.getElementById('loading').innerHTML = 
                        'Ошибка загрузки модели. Пожалуйста, обновите страницу.';
                }
            );

            // Responsive handling
            window.addEventListener('resize', onWindowResize);
            window.addEventListener('orientationchange', onWindowResize);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function toggleAutoRotate() {
            autoRotate = !autoRotate;
            controls.autoRotate = autoRotate;
            controls.autoRotateSpeed = 1.5;
            document.querySelector('.control-btn').textContent = 
                `Автооблёт: ${autoRotate ? 'ВКЛ' : 'ВЫКЛ'}`;
        }

        function resetView() {
            controls.reset();
            camera.position.set(5, 5, 5);
            controls.update();
        }

        function animate() {
            requestAnimationFrame(animate);
            const delta = clock.getDelta();
            
            if (mixer) mixer.update(delta);
            if (autoRotate) controls.update();
            
            renderer.render(scene, camera);
        }
    </script>
</body>
</html>
